funpack -- fast unpacker

This module utilizes the Python module struct to unpack binary structure.
struct is not a difficult module to use, but it requires you manage your own offset and endianness.
This requires mixing the data buffer, the offset counter, the endianness char, and unpacked data.
The goal of this module is to package the first three into one object.
I also use the module infrequently enough to have to refer to the format characters table every time I use it.
Thus, the shortcut functions are defined based on size.

With just struct:

	import struct

	dat = ...
	offset = 0
	endian = ">"

	fooa = struct.unpack_from(endian + "B", dat, offset)[0]
	offset += struct.calcsize(endian + "B")

	foob,fooc = struct.unpack_from(endian + "BB", dat, offset)
	offset += struct.calcsize(endian + "BB")

With funpack:

	import funpack

	dat = ...

	f = funpack.funpack(dat, endian=funpack.Endianness.Big)

	fooa = f.u8()
	foob,fooc = f.u8(2)

That's it.
The offset counter is stored inside the funpack() object and the endianness is automatically applied to each unpack operation.
The resulting code is significantly cleaner and avoids hard-to-debug messy errors from not passing the exact string to unpack and calcsize, etc.

funpack functions:
	pad				Reads padding bytes
	u8				Reads 8-bit unsigned integer
	u16				Reads 16-bit unsigned integer
	u32				Reads 32-bit unsigned integer
	u64				Reads 64-bit unsigned integer
	s8				Reads 8-bit signed integer
	s16				Reads 16-bit signed integer
	s32				Reads 32-bit signed integer
	s64				Reads 64-bit signed integer
	f32				Reads 32-bit float ("float")
	f64				Reads 64-bit float ("double")
	u8len_u8dat		Reads an unsigned 8-bit length and that many unsigned 8-bit bytes
	u8len_u16dat	Reads an unsigned 8-bit length and that many unsigned 16-bit bytes
	u8len_u32dat	Reads an unsigned 8-bit length and that many unsigned 32-bit bytes
	u8len_u64dat	Reads an unsigned 8-bit length and that many unsigned 64-bit bytes
	u16len_u8dat	Reads an unsigned 16-bit length and that many unsigned 8-bit bytes
	u16len_u16dat	Reads an unsigned 16-bit length and that many unsigned 16-bit bytes
	u16len_u32dat	Reads an unsigned 16-bit length and that many unsigned 32-bit bytes
	u16len_u64dat	Reads an unsigned 16-bit length and that many unsigned 64-bit bytes
	u8len_f32dat	Reads an unsigned 8-bit length and that many 32-bit floats ("float")
	u8len_f64dat	Reads an unsigned 8-bit length and that many 64-bit floats ("double")
	u16len_f32dat	Reads an unsigned 16-bit length and that many 32-bit floats ("float")
	u16len_f64dat	Reads an unsigned 16-bit length and that many 64-bit floats ("double")

	Unpack	Accepts a struct format string and returns results in a tuple

funpack properties:
	Offset	Gets/sets the current offset within the data stream
	Endian	Gets/sets the endianness of the data source, which can be an Endianness value or string
	Src		Gets the data source being unpacked

Use the online help for further information:

	$ python3
	>>> import funpack
	>>> help(funpack.funpack)
	Help on class funpack in module funpack:

	class funpack(builtins.object)
	 |  Fast unpacker class.
	 |  Uses the struct module that comes with Python and provided faster/easier access to unpacking.
	 |  Offset within the data source is maintained within and exposed via the Offset property.
	 |  The endianness is supplied with each unpack call and exposed via the Endian property..
	 |  Both the offset and endian can be changed at any time.
	 |  
	 |  The unpack functions provided are named based on size, rather than an arbitrary character code.
	 |  Note that not all characters have shortcut functions (mostly because I don't use them).
	 |  
	 |  Lastly, you can call Unpack() directly with any format string you need to use.
	 |  
	 |  Methods defined here:
	 |  
	 |  Unpack(self, fmt)
	 |      Unpack wraps struct.unpack by using the internal offset counter and the endian specified in the initializer.
	 |  
	................

